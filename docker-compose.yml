# docker-compose.yml (versão final)
services:
  backend:
    build: ./backend
    container_name: newshub-backend
    ports:
      - "5001:5000"
    volumes:
      # 1. Monta o código da aplicação para que o Gunicorn o encontre e para o hot-reload funcionar.
      - ./backend/app:/app/src
      # 2. Monta todo o projeto na pasta /workspace para que o VS Code possa acessá-lo.
      - .:/workspace:cached
    environment:
      - DATABASE_URL=postgresql://newshub_user:strong_password@db:5432/newshub_db
    depends_on: # Aguarda o banco de dados estar pronto para aceitar conexões
      db:
        condition: service_healthy

  # NOVO SERVIÇO: FRONTEND
  frontend:
    # Constrói a imagem a partir do Dockerfile na pasta `./frontend`
    build: ./frontend
    container_name: newshub-frontend
    ports:
      # Mapeia a porta 5173 (Vite) do contêiner para a 5173 da nossa máquina
      - "5173:5173"
    volumes:
      # Espelha o código do frontend para ativar o Hot-Reloading
      - ./frontend:/app
      # Adicionamos um volume anônimo para node_modules para evitar que a pasta local
      # sobrescreva a que foi instalada dentro do contêiner.
      - /app/node_modules

  db:
    image: postgres:14-alpine
    container_name: newshub-db
    environment:
      - POSTGRES_DB=newshub_db
      - POSTGRES_USER=newshub_user
      - POSTGRES_PASSWORD=strong_password
    healthcheck: # Verifica se o PostgreSQL está pronto para aceitar conexões
      test: ["CMD-SHELL", "pg_isready -U newshub_user -d newshub_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # Não é necessário expor a porta do DB ao host se apenas o backend a acessa,
    # mas mantemos para facilitar a depuração com clientes de DB externos.
    ports:
      - "5432:5432"

volumes:
  postgres_data:
